// ~~ Generated by projen
/* eslint-disable */
import { App, AppProps, Stack, StackProps } from 'aws-cdk-lib';
import { CfnOutput } from 'aws-cdk-lib';
import { StringParameter } from 'aws-cdk-lib/aws-ssm';
import * as fs from 'fs';

const versioningConfig = {
  "enabled": true,
  "strategy": {
    "format": "{git-tag}",
    "components": {
      "gitTag": {
        "stripPrefix": "v"
      },
      "commitCount": {
        "countFrom": "all"
      }
    }
  },
  "outputs": {
    "cloudFormation": {
      "enabled": true
    },
    "parameterStore": {
      "enabled": false,
      "parameterName": ""
    }
  },
  "stageOverrides": {
    "dev": {
      "enabled": true,
      "strategy": {
        "format": "{commit-count}",
        "components": {
          "commitCount": {
            "countFrom": "all"
          }
        }
      },
      "outputs": {
        "cloudFormation": {
          "enabled": true
        },
        "parameterStore": {
          "enabled": false,
          "parameterName": ""
        }
      }
    }
  }
};


/**
 * Version information interface
 */
export interface VersionInfo {
  version: string;
  commitHash: string;
  commitHashShort: string;
  branch: string;
  commitCount: number;
  packageVersion: string;
  deployedAt: string;
  deployedBy: string;
  environment: string;
}

/**
 * Load version information from generated file
 */
export function loadVersionInfo(): VersionInfo {
  try {
    return JSON.parse(fs.readFileSync('~version.json', 'utf8'));
  } catch (error) {
    console.warn('Could not load version info, using fallback');
    return {
      version: '0.0.0',
      commitHash: 'unknown',
      commitHashShort: 'unknown',
      branch: 'unknown',
      commitCount: 0,
      packageVersion: '0.0.0',
      deployedAt: new Date().toISOString(),
      deployedBy: 'unknown',
      environment: 'unknown'
    };
  }
}

/**
 * Get versioning configuration for a specific stage
 */
function getStageConfig(stageName: string, baseConfig: any, stageOverrides?: Record<string, any>): any {
  if (!stageOverrides || !stageOverrides[stageName]) {
    return baseConfig;
  }
  
  // Merge stage override with base config
  const override = stageOverrides[stageName];
  return {
    ...baseConfig,
    outputs: {
      cloudFormation: override.outputs?.cloudFormation || baseConfig.outputs.cloudFormation,
      parameterStore: override.outputs?.parameterStore || baseConfig.outputs.parameterStore,
    }
  };
}

/**
 * Add versioning outputs to a stack
 */
function addVersioningToStack(stack: Stack, stageName: string, stageOverrides?: any): void {
  const versionInfo = loadVersionInfo();
  const baseConfig = versioningConfig;
  const config = getStageConfig(stageName, baseConfig, stageOverrides);
  
  // Check if format is specified in CloudFormation or ParameterStore configs
  const cfFormat = config.outputs.cloudFormation?.format || 'structured';
  const ssmFormat = config.outputs.parameterStore?.format || 'structured';
  
  // Add CloudFormation outputs
  if (config.outputs.cloudFormation?.enabled) {
    if (cfFormat === 'plain') {
      // Plain format - single output with version string
      new CfnOutput(stack, 'AppVersion', {
        value: versionInfo.version,
        description: 'Application version',
        exportName: config.outputs.cloudFormation.exportName,
      });
    } else {
      // Structured format - multiple outputs
      new CfnOutput(stack, 'AppVersion', {
        value: versionInfo.version,
        description: 'Application version',
        exportName: config.outputs.cloudFormation.exportName,
      });
      
      new CfnOutput(stack, 'AppVersionCommitHash', {
        value: versionInfo.commitHash,
        description: 'Git commit hash',
        exportName: config.outputs.cloudFormation.exportName ? `${config.outputs.cloudFormation.exportName}CommitHash` : undefined,
      });
      
      new CfnOutput(stack, 'AppVersionBranch', {
        value: versionInfo.branch,
        description: 'Git branch',
        exportName: config.outputs.cloudFormation.exportName ? `${config.outputs.cloudFormation.exportName}Branch` : undefined,
      });

      new CfnOutput(stack, 'AppVersionInfo', {
        value: JSON.stringify(versionInfo),
        description: 'Complete version information',
        exportName: config.outputs.cloudFormation.exportName ? `${config.outputs.cloudFormation.exportName}Info` : undefined,
      });
    }
  }
  
  // Add SSM Parameter Store parameters
  if (config.outputs.parameterStore?.enabled) {
    if (config.outputs.parameterStore.hierarchical) {
      // Hierarchical parameters
      const baseParameterName = (config.outputs.parameterStore.parameterName || '/{stackName}/version')
        .replace('{stackName}', stack.stackName)
        .replace('{stageName}', stageName);
        
      // Create hierarchical parameters
      new StringParameter(stack, 'VersionParameterVersion', {
        parameterName: `${baseParameterName}/version`,
        stringValue: versionInfo.version,
        description: 'Application version',
      });
      
      new StringParameter(stack, 'VersionParameterCommitHash', {
        parameterName: `${baseParameterName}/commitHash`,
        stringValue: versionInfo.commitHash,
        description: 'Git commit hash',
      });
      
      new StringParameter(stack, 'VersionParameterBranch', {
        parameterName: `${baseParameterName}/branch`,
        stringValue: versionInfo.branch,
        description: 'Git branch',
      });
      
      new StringParameter(stack, 'VersionParameterInfo', {
        parameterName: `${baseParameterName}/info`,
        stringValue: JSON.stringify(versionInfo),
        description: 'Complete version information',
      });
    } else {
      // Single parameter
      const parameterName = (config.outputs.parameterStore.parameterName || '/{stackName}/version')
        .replace('{stackName}', stack.stackName)
        .replace('{stageName}', stageName);
        
      new StringParameter(stack, 'VersionParameter', {
        parameterName,
        stringValue: ssmFormat === 'plain' ? versionInfo.version : JSON.stringify(versionInfo),
        description: ssmFormat === 'plain' ? 'Application version' : 'Complete version information',
      });
    }
  }
}

/**
 * PipelineAppProps is an extension of AppProps, which is part of the AWS CDK core.
 * It includes optional functions to provide AWS Stacks for different stages.
 *
 * Use these functions to instantiate your application stacks with the parameters for
 * each stage
 */
export interface PipelineAppProps extends AppProps {
  /** This function will be used to generate a dev stack. */
  provideDevStack: (app: App, stackId: string, props: PipelineAppStackProps) => Stack;
  /** This function will be used to generate a prod stack. */
  provideProdStack: (app: App, stackId: string, props: PipelineAppStackProps) => Stack;

}

/**
 * PipelineAppStackProps is an extension of StackProps, which is part of the AWS CDK core.
 * It includes an additional property to specify the stage name.
 */
export interface PipelineAppStackProps extends StackProps {
  stageName: string;
}

/**
 * The PipelineApp class extends the App class from AWS CDK and overrides the constructor to support
 * different stages of the application (development, production, personal, feature) by invoking the provided
 * stack-providing functions from the props.
 */
export class PipelineApp extends App {
  constructor(props: PipelineAppProps) {
    super(props);

    // If a function is provided for creating a dev stack, it is called with necessary arguments.
    if (props.provideDevStack) {
      props.provideDevStack(this, 'MyApp-dev', { env: { account: '352770552266', region: 'eu-central-1' }, stackName: 'MyApp-dev', stageName: 'dev' });
    }
    // If a function is provided for creating a prod stack, it is called with necessary arguments.
    if (props.provideProdStack) {
      props.provideProdStack(this, 'MyApp-prod', { env: { account: '505825668341', region: 'eu-central-1' }, stackName: 'MyApp-prod', stageName: 'prod' });
    }

    // Apply versioning to all stacks
    this.node.children.forEach((child) => {
      if (child instanceof Stack) {
        const stageName = child.stackName.split('-').pop() || 'default';
        addVersioningToStack(child, stageName, versioningConfig.stageOverrides);
      }
    });

  }
}
