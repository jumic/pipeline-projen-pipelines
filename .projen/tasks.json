{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "bump": {
      "name": "bump",
      "description": "Bumps version based on latest git tag",
      "steps": [
        {
          "exec": "pipelines-release bump"
        },
        {
          "exec": "git push --tags"
        }
      ]
    },
    "bundle": {
      "name": "bundle",
      "description": "Prepare assets"
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "spawn": "version:compute"
        },
        {
          "spawn": "version:print"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "ts-node --project tsconfig.dev.json .projenrc.ts"
        }
      ]
    },
    "deploy:dev": {
      "name": "deploy:dev",
      "steps": [
        {
          "exec": "cdk --app cdk.out --outputs-file cdk-outputs-dev.json --progress events --require-approval never deploy MyApp-dev"
        }
      ]
    },
    "deploy:prod": {
      "name": "deploy:prod",
      "steps": [
        {
          "exec": "cdk --app cdk.out --outputs-file cdk-outputs-prod.json --progress events --require-approval never deploy MyApp-prod"
        }
      ]
    },
    "diff:dev": {
      "name": "diff:dev",
      "steps": [
        {
          "exec": "cdk --app cdk.out diff MyApp-dev"
        }
      ]
    },
    "diff:prod": {
      "name": "diff:prod",
      "steps": [
        {
          "exec": "cdk --app cdk.out diff MyApp-prod"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "env": {
        "ESLINT_USE_FLAT_CONFIG": "false"
      },
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern $@ src test build-tools projenrc .projenrc.ts",
          "receiveArgs": true
        }
      ]
    },
    "fastdiff:dev": {
      "name": "fastdiff:dev",
      "steps": [
        {
          "exec": "cdk --app cdk.out diff --no-changeset MyApp-dev"
        }
      ]
    },
    "fastdiff:prod": {
      "name": "fastdiff:prod",
      "steps": [
        {
          "exec": "cdk --app cdk.out diff --no-changeset MyApp-prod"
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "yarn install --check-files"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "yarn install --check-files --frozen-lockfile"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package"
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": [
        {
          "spawn": "synth:silent"
        }
      ]
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "publish:assets": {
      "name": "publish:assets",
      "steps": [
        {
          "spawn": "publish:assets:dev"
        },
        {
          "spawn": "publish:assets:prod"
        }
      ]
    },
    "publish:assets:dev": {
      "name": "publish:assets:dev",
      "steps": [
        {
          "exec": "npx cdk-assets -p cdk.out/MyApp-dev.assets.json publish"
        }
      ]
    },
    "publish:assets:prod": {
      "name": "publish:assets:prod",
      "steps": [
        {
          "exec": "npx cdk-assets -p cdk.out/MyApp-prod.assets.json publish"
        }
      ]
    },
    "release:push-assembly": {
      "name": "release:push-assembly",
      "steps": [
        {
          "exec": "pipelines-release create-manifest \"cdk.out\"  \"@jumic\""
        },
        {
          "cwd": "cdk.out",
          "exec": "npm version --no-git-tag-version from-git"
        },
        {
          "cwd": "cdk.out",
          "exec": "npm publish"
        }
      ]
    },
    "synth": {
      "name": "synth",
      "description": "Synthesizes your cdk app into cdk.out",
      "steps": [
        {
          "exec": "rm -rf cdk.out"
        },
        {
          "exec": "cdk synth"
        }
      ]
    },
    "synth:silent": {
      "name": "synth:silent",
      "description": "Synthesizes your cdk app into cdk.out and suppresses the template in stdout (part of \"yarn build\")",
      "steps": [
        {
          "exec": "rm -rf cdk.out"
        },
        {
          "exec": "cdk synth -q"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "jest --passWithNoTests --updateSnapshot",
          "receiveArgs": true
        },
        {
          "spawn": "eslint"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npx npm-check-updates@16 --upgrade --target=minor --peer --no-deprecated --dep=dev,peer,prod,optional --filter=@types/jest,@types/node,@types/standard-version,cdk-assets,esbuild,eslint-import-resolver-typescript,eslint-plugin-import,jest,projen,standard-version,ts-jest,ts-node,typescript,projen-pipelines"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade @stylistic/eslint-plugin @types/jest @types/node @types/standard-version @typescript-eslint/eslint-plugin @typescript-eslint/parser aws-cdk cdk-assets esbuild eslint-import-resolver-typescript eslint-plugin-import eslint jest jest-junit projen standard-version ts-jest ts-node typescript aws-cdk-lib constructs projen-pipelines"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "version:compute": {
      "name": "version:compute",
      "description": "Compute version information from git",
      "steps": [
        {
          "exec": "echo \"Computing version information...\""
        },
        {
          "exec": "node -e \"\nconst fs = require('fs');\nconst cp = require('child_process');\n\n// Import versioning modules\nconst { VersionComputer, VersioningStrategy } = require('projen-pipelines');\n\ntry {\n  // Gather git information\n  const commitHash = cp.execSync('git rev-parse HEAD', {encoding: 'utf8'}).trim();\n  const commitHashShort = commitHash.substring(0, 8);\n  const commitCount = parseInt(cp.execSync('git rev-list --count HEAD', {encoding: 'utf8'}).trim());\n  const branch = cp.execSync('git rev-parse --abbrev-ref HEAD', {encoding: 'utf8'}).trim();\n  \n  let tag = '';\n  let commitsSinceTag = 0;\n  try { \n    tag = cp.execSync('git describe --tags --exact-match --all', {encoding: 'utf8'}).trim();\n  } catch {\n    try {\n      const describeOutput = cp.execSync('git describe --tags --long --all', {encoding: 'utf8'}).trim();\n      const match = describeOutput.match(/^(.+)-(\\\\d+)-g[0-9a-f]+$/);\n      if (match) {\n        tag = match[1];\n        commitsSinceTag = parseInt(match[2]);\n      }\n    } catch {}\n  }\n  \n  let packageVersion = '0.0.0';\n  try {\n    packageVersion = JSON.parse(fs.readFileSync('package.json', 'utf8')).version;\n  } catch {}\n  \n  // Create computation context\n  const context = {\n    gitInfo: {\n      commitHash,\n      commitHashShort,\n      branch,\n      tag,\n      commitsSinceTag,\n      commitCount,\n      packageVersion\n    },\n    environment: process.env.STAGE || process.env.ENVIRONMENT || 'unknown',\n    deployedBy: process.env.GITHUB_ACTOR || process.env.GITLAB_USER_LOGIN || process.env.USER || 'unknown',\n    buildNumber: process.env.BUILD_NUMBER || process.env.GITHUB_RUN_NUMBER,\n    repository: process.env.GITHUB_REPOSITORY || process.env.CI_PROJECT_PATH,\n    pipelineVersion: process.env.PIPELINE_VERSION\n  };\n  \n  // Create strategy from configuration\n  const strategyConfig = {\\\"format\\\":\\\"{package-version}\\\",\\\"components\\\":{\\\"packageJson\\\":{}}};\n  const strategy = new VersioningStrategy(strategyConfig.format, strategyConfig.components);\n  \n  // Compute version\n  const computer = new VersionComputer(strategy);\n  computer.computeVersionInfo(context).then(versionInfo => {\n    fs.writeFileSync('~version.json', versionInfo.toJson());\n    console.log('Version computed:', versionInfo.version, '(commit:', versionInfo.commitHashShort + ')');\n  }).catch(error => {\n    console.error('Error computing version:', error.message);\n    const fallback = {\n      version: '0.0.0',\n      commitHash: 'unknown',\n      commitHashShort: 'unknown',\n      branch: 'unknown',\n      commitCount: 0,\n      packageVersion: '0.0.0',\n      deployedAt: new Date().toISOString(),\n      deployedBy: 'unknown',\n      environment: 'unknown'\n    };\n    fs.writeFileSync('~version.json', JSON.stringify(fallback, null, 2));\n  });\n} catch (e) {\n  console.error('Error in version computation:', e.message);\n  const fallback = {\n    version: '0.0.0',\n    commitHash: 'unknown',\n    commitHashShort: 'unknown',\n    branch: 'unknown',\n    commitCount: 0,\n    packageVersion: '0.0.0',\n    deployedAt: new Date().toISOString(),\n    deployedBy: 'unknown',\n    environment: 'unknown'\n  };\n  fs.writeFileSync('~version.json', JSON.stringify(fallback, null, 2));\n}\""
        }
      ]
    },
    "version:fetch:dev": {
      "name": "version:fetch:dev",
      "description": "Fetch version data from deployed dev stack",
      "steps": [
        {
          "exec": "echo \"Fetching version data from CloudFormation outputs for dev...\" && aws cloudformation describe-stacks --stack-name MyApp-dev --region eu-central-1 --query \"Stacks[0].Outputs[?starts_with(OutputKey, 'AppVersion')].{Key:OutputKey,Value:OutputValue}\" --output table"
        }
      ]
    },
    "version:fetch:prod": {
      "name": "version:fetch:prod",
      "description": "Fetch version data from deployed prod stack",
      "steps": [
        {
          "exec": "echo \"Fetching version data from CloudFormation outputs for prod...\" && aws cloudformation describe-stacks --stack-name MyApp-prod --region eu-central-1 --query \"Stacks[0].Outputs[?starts_with(OutputKey, 'AppVersion')].{Key:OutputKey,Value:OutputValue}\" --output table"
        }
      ]
    },
    "version:print": {
      "name": "version:print",
      "description": "Print version information",
      "steps": [
        {
          "exec": "cat ~version.json"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node --print process.env.PATH\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \"npx projen\"."
}
